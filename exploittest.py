import subprocess
import json
from datetime import datetime
import os
import re
import ipaddress
from typing import Optional, Dict, Union, List
import ftplib
import smtplib
import poplib
import imaplib
import requests
import ldap3
import paramiko
import socket
from contextlib import closing
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
import xml.etree.ElementTree as ET
import io

class ServiceScanner:
    """Class to handle service detection and basic connection testing"""
    
    COMMON_SERVICES = {
        'ftp': [20, 21],
        'ssh': [22],
        'telnet': [23],
        'smtp': [25, 465, 587],
        'imap': [143, 993],
        'pop3': [110, 995],
        'http': [80, 6666],
        'https': [443],
        'rdp': [3389],
        'ldap': [389, 636],
        'tftp': [69]
    }

    def __init__(self, target: str, timeout: int = 5):
        self.target = target
        self.timeout = timeout
        self.detected_services = {}

    def parse_nmap_output(self, nmap_data: Dict) -> Dict:
        """Parse nmap XML output to identify running services and prepare search terms"""
        services = {}
        raw_output = nmap_data.get('raw_output', '')

        try:
            # Parse XML from the raw output
            tree = ET.parse(io.StringIO(raw_output))
            root = tree.getroot()

            # Find all port elements
            for host in root.findall('.//host'):
                for port in host.findall('.//port'):
                    state = port.find('state')
                    if state is not None and state.get('state') == 'open':
                        port_id = int(port.get('portid'))
                        service_elem = port.find('service')

                        if service_elem is not None:
                            service_name = service_elem.get('name')
                            product = service_elem.get('product', '')
                            version = service_elem.get('version', '')
                            extra_info = service_elem.get('extrainfo', '')

                            # Build version string
                            version_str = ' '.join(filter(None, [product, version, extra_info]))

                            # Find the canonical service name from our COMMON_SERVICES
                            canonical_service = None
                            for common_name, ports in self.COMMON_SERVICES.items():
                                if port_id in ports or service_name in common_name:
                                    canonical_service = common_name
                                    break

                            if canonical_service:
                                services[canonical_service] = {
                                    'port': port_id,
                                    'status': 'open',
                                    'version': {
                                        'name': service_name,
                                        'version': version_str if version_str else 'Unknown',
                                        'raw': f"Port {port_id}: {service_name} {version_str}"
                                    },
                                    'search_terms': f"{service_name} {product} {version}".strip()
                                }

        except ET.ParseError as e:
            print(f"Error parsing XML: {e}")
            return {}

        return services

    def search_for_exploits(self, detected_services: Dict) -> Dict:
        """Search for exploits using searchsploit for each detected service"""
        exploits = {}
        for service, details in detected_services.items():
            search_terms = details['search_terms']
            cmd = f"searchsploit {search_terms} -j"  # Use JSON output format for easy parsing

            try:
                # Run the searchsploit command
                process = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                
                if process.returncode == 0:
                    # Parse the JSON output from searchsploit
                    result = json.loads(process.stdout)
                    exploits[service] = result.get("RESULTS_EXPLOIT", [])  # Collect only relevant exploit results
                else:
                    print(f"Searchsploit failed for {service}: {process.stderr}")
            
            except Exception as e:
                print(f"Error running searchsploit for {service}: {e}")
        
        return exploits

def print_scan_summary(results: Dict) -> None:
    """Print a summary of scan results"""
    print("\n" + "="*50)
    print("SCAN RESULTS SUMMARY")
    print("="*50)
    
    if not results:
        print("No results available.")
        return

    # Print target information
    print(f"\nTarget: {results['metadata']['target']}")
    print(f"Scan Time: {results['metadata']['timestamp']}")
    print("\nDETECTED SERVICES:")
    print("-"*50)

    # Get and sort detected services
    services = results.get("detected_services", {})
    if not services:
        print("No services detected.")
        return

    # Print services in a numbered list
    for i, (service_name, info) in enumerate(services.items(), 1):
        version_info = info['version']
        display_name = service_name.upper()
        if version_info['version'] != 'Unknown':
            display_name += f" {version_info['version']}"
        
        print(f"{i}. {display_name} (Port {info['port']})")
        
        # If we have test results for this service, show them
        if service_name in results.get("service_results", {}):
            test_result = results["service_results"][service_name]
            status = "✓" if test_result['success'] else "✗"
            print(f"   Status: {status} {test_result['message']}")

    print("\n" + "="*50)

class NetworkScanner:
    """Main scanner class that coordinates scanning and result handling"""
    
    def __init__(self, output_dir: str = "scan_results"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)

    # Additional methods can be added here

def test_parse_nmap_output_from_file():
    # Load the scan results from the file
    with open("scan_results/scan_20241105_182624_127.0.0.1.json", "r") as file:
        scan_data = json.load(file)
    
    # Extract the raw output and detected services
    nmap_data = {"raw_output": scan_data["raw_output"]}
    
    # Initialize the ServiceScanner and parse the output
    scanner = ServiceScanner(target=scan_data["metadata"]["target"])
    parsed_services = scanner.parse_nmap_output(nmap_data)

    # Print the parsed services and search terms
    print("Parsed Services and Search Terms:")
    for service, details in parsed_services.items():
        print(f"{service}: {details['search_terms']}")

    # Search for exploits using searchsploit
    exploits = scanner.search_for_exploits(parsed_services)

    # Print the exploits found for each service
    print("\nExploits Found:")
    for service, exploit_list in exploits.items():
        print(f"\n{service}:")
        if not exploit_list:
            print("  No exploits found.")
        else:
            for exploit in exploit_list:
                print(f"  - {exploit['Title']} (EDB-ID: {exploit['EDB-ID']})")

# Call the test function
if __name__ == "__main__":
    test_parse_nmap_output_from_file()
